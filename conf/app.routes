# microservice specific routes

POST         /new                                   controllers.VatRegistrationController.newVatRegistration
POST         /incorporation-data                    controllers.ProcessIncorporationsController.processIncorp

GET          /:regId/get-scheme                     controllers.VatRegistrationController.retrieveVatScheme(regId: RegistrationId)

GET          /:regId/trading-details                controllers.TradingDetailsController.fetchTradingDetails(regId)
PATCH        /:regId/trading-details                controllers.TradingDetailsController.updateTradingDetails(regId)

GET          /:regId/turnover-estimates             controllers.VatRegistrationController.fetchTurnoverEstimates(regId)
PATCH        /:regId/turnover-estimates             controllers.VatRegistrationController.updateTurnoverEstimates(regId)

GET          /:regId/flat-rate-scheme               controllers.FlatRateSchemeController.fetchFlatRateScheme(regId)
PATCH        /:regId/flat-rate-scheme               controllers.FlatRateSchemeController.updateFlatRateScheme(regId)
DELETE       /:regId/flat-rate-scheme               controllers.FlatRateSchemeController.removeFlatRateScheme(regId)

GET          /:regId/returns                        controllers.VatRegistrationController.fetchReturns(regId)
PATCH        /:regId/returns                        controllers.VatRegistrationController.updateReturns(regId)

GET          /:regId/acknowledgement-reference      controllers.VatRegistrationController.getAcknowledgementReference(regId: RegistrationId)

GET          /incorporation-information/:txId       controllers.IncorporationInformationController.getIncorporationInformation(txId: TransactionId)

DELETE       /:regId/delete-scheme                  controllers.VatRegistrationController.deleteVatScheme(regId: String)
PATCH        /:transId/clear-scheme                 controllers.VatRegistrationController.clearDownDocument(transId: String)

PATCH        /:regId/transaction-id                 controllers.VatRegistrationController.saveTransId(regId: String)

PUT          /:regID/submit-registration            controllers.VatRegistrationController.submitVATRegistration(regID : RegistrationId)

GET          /:regId/status                         controllers.VatRegistrationController.getDocumentStatus(regId: RegistrationId)

GET         /:regId/eligibility                     controllers.EligibilityController.getEligibility(regId: String)
PATCH       /:regId/eligibility                     controllers.EligibilityController.updateEligibility(regId: String)

GET          /:regId/bank-account                   controllers.VatRegistrationController.fetchBankAccountDetails(regId)
PATCH        /:regId/bank-account                   controllers.VatRegistrationController.updateBankAccountDetails(regId)

GET         /:regId/threshold                       controllers.ThresholdController.getThreshold(regId: String)
PATCH       /:regId/threshold                       controllers.ThresholdController.updateThreshold(regId: String)

GET         /:regId/officer                         controllers.LodgingOfficerController.getLodgingOfficer(regId: String)
PATCH       /:regId/officer                         controllers.LodgingOfficerController.updateLodgingOfficer(regId: String)
PATCH       /:regId/update-iv-status/:ivPassed      controllers.LodgingOfficerController.updateIVStatus(regId, ivPassed: Boolean)

GET         /:regId/sicAndComp                      controllers.SicAndComplianceController.getSicAndCompliance(regId: String)
PATCH       /:regId/sicAndComp                      controllers.SicAndComplianceController.updateSicAndCompliance(regId: String)

GET         /:regId/business-contact                controllers.BusinessContactController.getBusinessContact(regId: String)
PATCH       /:regId/business-contact                controllers.BusinessContactController.updateBusinessContact(regId: String)

GET         /threshold/:date                        controllers.VatThresholdController.getThresholdForDate(date: String)