# microservice specific routes

POST         /new                                   controllers.VatRegistrationController.newVatRegistration
POST         /incorporation-data                    controllers.ProcessIncorporationsController.processIncorp

GET          /:regId/get-scheme                     controllers.VatRegistrationController.retrieveVatScheme(regId: RegistrationId)

PATCH        /:regID/trading-details                controllers.VatRegistrationController.updateVatTradingDetails(regID: RegistrationId)
# uncomment when legacy trading details API gets removed or renamed
#PATCH        /:regId/trading-details                controllers.VatRegistrationController.updateTradingDetails(regId)

GET          /:regId/trading-details                controllers.VatRegistrationController.fetchTradingDetails(regId)

PATCH        /:regID/vat-financials                 controllers.VatRegistrationController.updateVatFinancials(regID: RegistrationId)
PATCH        /:regID/sic-and-compliance             controllers.VatRegistrationController.updateSicAndCompliance(regID: RegistrationId)
PATCH        /:regID/vat-contact                    controllers.VatRegistrationController.updateVatContact(regID: RegistrationId)
PATCH        /:regID/service-eligibility            controllers.VatRegistrationController.updateVatEligibility(regID: RegistrationId)
PATCH        /:regID/lodging-officer                controllers.VatRegistrationController.updateLodgingOfficer(regID: RegistrationId)
PATCH        /:regID/flat-rate-scheme               controllers.VatRegistrationController.updateFlatRateScheme(regID: RegistrationId)

GET          /:regId/returns                        controllers.VatRegistrationController.fetchReturns(regId)
PATCH        /:regId/returns                        controllers.VatRegistrationController.updateReturns(regId)

GET          /:regId/bank-account                   controllers.VatRegistrationController.fetchBankAccountDetails(regId)
PATCH        /:regId/bank-account                   controllers.VatRegistrationController.updateBankAccountDetails(regId)

GET          /:regId/turnover-estimates             controllers.VatRegistrationController.fetchTurnoverEstimates(regId)
PATCH        /:regId/turnover-estimates             controllers.VatRegistrationController.updateTurnoverEstimates(regId)

GET          /:regId/acknowledgement-reference      controllers.VatRegistrationController.getAcknowledgementReference(regId: RegistrationId)

GET          /incorporation-information/:txId       controllers.IncorporationInformationController.getIncorporationInformation(txId: TransactionId)

DELETE       /:regId/delete-scheme                  controllers.VatRegistrationController.deleteVatScheme(regId: String)

DELETE       /:regId/delete/:element                controllers.VatRegistrationController.deleteByElement(regId: RegistrationId, element: ElementPath)

PUT          /:regID/submit-registration            controllers.VatRegistrationController.submitVATRegistration(regID : RegistrationId)

GET          /:regId/status                         controllers.VatRegistrationController.getDocumentStatus(regId: RegistrationId)

PATCH        /:regId/update-iv-status               controllers.VatRegistrationController.updateIVStatus(regId)

### new api links
GET         /:regId/eligibility                     controllers.EligibilityController.getEligibility(regId: String)
PATCH       /:regId/eligibility                     controllers.EligibilityController.updateEligibility(regId: String)

GET         /:regId/threshold                       controllers.ThresholdController.getThreshold(regId: String)
PATCH       /:regId/threshold                       controllers.ThresholdController.updateThreshold(regId: String)

# rename to lodging officer once the old ones are removed
GET         /:regId/officer                         controllers.LodgingOfficerController.getLodgingOfficer(regId: String)
PATCH       /:regId/officer                         controllers.LodgingOfficerController.updateLodgingOfficer(regId: String)
PATCH       /:regId/update-iv-status/:ivPassed      controllers.LodgingOfficerController.updateIVStatus(regId, ivPassed: Boolean)
